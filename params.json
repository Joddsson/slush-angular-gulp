{"name":"Slush-angular-gulp","tagline":"First step towards integration of all the goodies of the open source projects ","body":"#slush-angular-gulp [![GitHub version](https://badge.fury.io/gh/reflexdemon%2Fslush-angular-gulp.png)](http://badge.fury.io/gh/reflexdemon%2Fslush-angular-gulp) [![npm version](https://badge.fury.io/js/slush-angular-gulp.png)](http://badge.fury.io/js/slush-angular-gulp)  \r\n\r\n---\r\n\r\n\r\n> A [slush](http://slushjs.github.io) generator for AngularJS using the [Google Angular App Structure Recommendations](https://docs.google.com/document/d/1XXMvReO8-Awi1EZXAXS4PzDzdNvV6pGcuaF4Q9821Es/pub)\r\n\r\n![Slush Angular Gulp](https://github.com/reflexdemon/slush-angular-gulp/raw/master/templates/app/src/app/assets/slush-angular-gulp.png \"Slush Angular Gulp\")\r\n\r\n# Introduction\r\n\r\nAll, would like to tell you [slush-angular-gulp](http://reflexdemon.github.io/slush-angular-gulp) is build with inspiration from the below projects.\r\n\r\n1. [slush-angular](https://www.npmjs.com/package/slush-angular)\r\n2. [angular-styleguide](https://github.com/johnpapa/angular-styleguide)\r\n3. [Yomen generator-angular](https://github.com/yeoman/generator-angular)\r\n\r\nMoreover, this is just a first step towards integration of all the goodies of the above mentioned projects and expect more on future releases.\r\n\r\n## Installation\r\n\r\nInstall [slush-angular-gulp](http://reflexdemon.github.io/slush-angular-gulp) globally:\r\n\r\n```bash\r\nnpm install -g slush-angular-gulp\r\n```\r\n\r\nYou'll also need to have `bower`, `slush` and `gulp` installed globally for a smooth installation\r\n\r\n```bash\r\nnpm install -g bower gulp slush\r\n```\r\n\r\n### Bower dependency\r\n\r\nHere is the list of dependencies that are pre selected.\r\n\r\n1. Angular 1.4\r\n2. Bootstrap \r\n\r\n### CSS Preprocessor\r\n\r\n`LESS`, `Stylus`, and `Sass` to use as the CSS Preprocessor for your project.\r\n\r\n*Note* All `_*.styl`, `_*.less`, or `_*.scss` files will be considered \"partials\" and must be imported in another stylesheet file (without a leading \"_\") to be compiled.\r\n\r\n### Project structure\r\n\r\nYou will also have the option to generate a simple Todo list app in your project as well, to be used as a live example of how to structure your app.\r\n\r\nThe project structure with the Todo list example included will look like this:\r\n\r\n```\r\nmy-angular-app/\r\n├── .bowerrc\r\n├── .csslintrc\r\n├── .editorconfig\r\n├── .gitignore\r\n├── .jshintrc\r\n├── bower.json\r\n├── gulpfile.js                             # See \"Gulpfile\" below\r\n├── karma.conf.js\r\n├── README.md\r\n├── package.json\r\n└── src\r\n    └── app\r\n        ├── app.js                          # Main app module and configuration\r\n        ├── app.styl/less/scss              # Main app stylesheet\r\n        ├── index.html                      # The index.html / app layout template\r\n        ├── assets                          # A folder meant for images and such...\r\n        │   └── .gitkeep\r\n        ├── styles\r\n        │   └── _base.styl/less/scss        # A stylesheet partial with base styles\r\n        └── todo\r\n            ├── todo-controller.js          # The todo controller\r\n            ├── todo-controller.spec.js     # Karma test for the todo controller\r\n            ├── todo.html                   # The todo list template\r\n            ├── todo.js                     # The todo module\r\n            └── todo.styl/less/scss         # Todo module specific styles\r\n```\r\nLink to [Gulpfile](#gulpfile)\r\n\r\n## Generators\r\n\r\nAvailable generators:\r\n\r\n* [angular-gulp](#app) (aka [angular-gulp:app](#app))\r\n* [angular-gulp:controller](#controller)\r\n* [angular-gulp:module](#module)\r\n* [angular-gulp:directive](#directive)\r\n* [angular-gulp:filter](#filter)\r\n* [angular-gulp:route](#route)\r\n* [angular-gulp:service](#service)\r\n* [angular-gulp:provider](#provider)\r\n* [angular-gulp:factory](#factory)\r\n* [angular-gulp:value](#value)\r\n* [angular-gulp:constant](#constant)\r\n* [angular-gulp:decorator](#decorator)\r\n* [angular-gulp:view](#view)\r\n\r\n### App\r\n\r\nSets up a new AngularJS app, generating all the boilerplate you need to get started. The app generator also optionally installs Bootstrap and additional AngularJS modules, such as angular-resource (installed by default).\r\n\r\nCreate a new folder for your project:\r\n\r\n```bash\r\nmkdir my-angular-app\r\n```\r\n\r\nRun the generator from within the new folder:\r\n\r\n```bash\r\ncd my-angular-app\r\n\r\nslush angular-gulp\r\n```\r\nor\r\n\r\n```bash\r\ncd my-angular-app\r\n\r\nslush angular-gulp:app\r\n```\r\n\r\nYou will now be prompted to give your new AngularJS app a name, which will be dasherized and used in its `bower.json` and `package.json` respectively. The chosen name will be camelized and used as the main angular module as well, inside `src/app/app.js`.\r\n\r\n\r\n\r\n### Controller\r\nGenerates a controller in `src/app/<module>`.\r\n\r\nSyntax:\r\n\r\n```bash\r\nslush angular-gulp:controller <ctrl-Name>\r\n```\r\n\r\nExample:\r\n\r\n```bash\r\nslush angular-gulp:controller login\r\n```\r\n\r\n```log\r\n[06:23:46] Starting 'angular-gulp:controller'...\r\n? What is the name of your controller? login\r\n? What is your AngularJS module name? home\r\n? Do you want to include unit testing? Yes\r\n[06:23:56] [conflict] Creating login-controller.spec.js\r\n[06:23:56] [conflict] Creating login-controller.js\r\n[06:23:56] Finished 'angular-gulp:controller' after 10 s\r\n[slush] Scaffolding done\r\n```\r\n\r\nProduces `src/app/home/login-controller.js`:\r\n```javascript\r\n(function() {\r\n    'use strict';\r\n\r\n\r\n    /**\r\n     * @ngdoc function\r\n     * @name myAngular.home.controller:LoginCtrl\r\n     * @description\r\n     * # LoginCtrl\r\n     * Controller of the myAngular.home\r\n     * @ngInject\r\n     */\r\n    function LoginCtrl() {\r\n        this.awesomeThings = [\r\n            'HTML5 Boilerplate',\r\n            'AngularJS',\r\n            'Karma'\r\n        ];\r\n    }\r\n\r\n    angular\r\n        .module('myAngular.home')\r\n        .controller('LoginCtrl', LoginCtrl);\r\n\r\n})();\r\n\r\n```\r\nand\r\nProduce `src/app/home/login-controller.spec.js`\r\n```javascript\r\n'use strict';\r\n/**\r\n * Simple test class for LoginCtrl on myAngular.home\r\n */\r\ndescribe('Controller: LoginCtrl', function () {\r\n\r\n  // load the controller's module\r\n  beforeEach(module('myAngular.home'));\r\n\r\n  var LoginCtrl;\r\n\r\n  // Initialize the controller and a mock scope\r\n  beforeEach(inject(function ($controller, $rootScope) {\r\n    LoginCtrl = $controller('LoginCtrl', {\r\n      // place here mocked dependencies\r\n    });\r\n  }));\r\n\r\n  it('should attach a list of awesomeThings to the scope', function () {\r\n    expect(LoginCtrl.awesomeThings.length).toBe(3);\r\n  });\r\n});\r\n\r\n```\r\n\r\n### Module\r\nGenerates a module in `src/app/<module>`.\r\n\r\nSyntax:\r\n\r\n```bash\r\nslush angular-gulp:module <module-Name>\r\n```\r\n\r\nExample:\r\n\r\n```bash\r\nslush angular-gulp:module user\r\n```\r\n\r\n```log\r\n[06:29:05] Starting 'angular-gulp:module'...\r\n? What is the name of your module? user\r\n[06:29:15] [conflict] Creating user-module.js\r\n[06:29:15] Finished 'angular-gulp:module' after 9.54 s\r\n[slush] Scaffolding done\r\n```\r\n\r\nProduces `src/app/user/user-module.js`:\r\n```javascript\r\n/**\r\n * Creates and initilizes the module user\r\n */\r\n\r\n(function() {\r\n        'use strict';\r\n\r\n        angular.module('myAngular.user', [], moduleConfiguration);\r\n\r\n        /* @ngInject */\r\n        function moduleConfiguration() {\r\n            //TODO Have any module specific configurator here\r\n        });\r\n}\r\n\r\n})();\r\n\r\n```\r\n\r\n### Directive\r\nGenerates a directive in `src/app/<module>`.\r\n\r\nSyntax:\r\n\r\n```bash\r\nslush angular-gulp:directive <directive-Name>\r\n```\r\n\r\nExample:\r\n\r\n```bash\r\nslush angular-gulp:directive awesome-thing\r\n```\r\n\r\n```log\r\n[08:08:05] Starting 'angular-gulp:directive'...\r\n? What is the name of your directive? awesome-thing\r\n? What is your AngularJS module name? user\r\n? Replace awesome-thing-directive.js? replace\r\n[08:08:11] [conflict] Overwriting awesome-thing-directive.js\r\n[08:08:11] Finished 'angular-gulp:directive' after 5.68 s\r\n[slush] Scaffolding done\r\n```\r\n\r\nProduces `src/app/user/awesome-thing-directive.js`:\r\n```javascript\r\n\r\n/**\r\n * @desc Please provide useful information regarding the directive with a proper example\r\n * @example <div awesome-thing></div>\r\n */\r\n(function() {\r\n    angular\r\n        .module('myAngular.user')\r\n        .directive('awesomeThing', awesomeThing );\r\n\r\n    function awesomeThing () {\r\n        /* implementation details */\r\n    }\r\n\r\n})();\r\n\r\n\r\n```\r\n\r\n### Filter\r\nGenerates a filter in `src/app/<module>`.\r\n\r\nSyntax:\r\n\r\n```bash\r\nslush angular-gulp:filter <filter-Name>\r\n```\r\n\r\nExample:\r\n\r\n```bash\r\nslush angular-gulp:filter checkmark\r\n```\r\n\r\n```log\r\n[08:35:16] Starting 'angular-gulp:filter'...\r\n? What is the name of your filter? checkmark\r\n? What is your AngularJS module name? home\r\n? Do you want to include unit testing? Yes\r\n[08:35:32] [conflict] Creating checkmark-filter.spec.js\r\n[08:35:32] [conflict] Creating checkmark-filter.js\r\n[08:35:32] Finished 'angular-gulp:filter' after 15 s\r\n[slush] Scaffolding done\r\n```\r\n\r\nProduces `src/app/home/checkmark-filter.js`:\r\n```javascript\r\n(function() {\r\n    'use strict';\r\n\r\n    angular.module('myAngular.home').filter('checkmark', function() {\r\n        return function(input) {\r\n            return input ? '\\u2713' : '\\u2718';\r\n        };\r\n    });\r\n})();\r\n```\r\n\r\nand \r\n\r\nProduces `src/app/home/checkmark-filter.spec.js`:\r\n```javascript\r\n'use strict';\r\n\r\ndescribe('filter', function() {\r\n\r\n  beforeEach(module('myAngular.home'));\r\n\r\n  describe('checkmark', function() {\r\n\r\n    it('should convert boolean values to unicode checkmark or cross',\r\n        inject(function(checkmarkFilter) {\r\n      expect(checkmarkFilter(true)).toBe('\\u2713');\r\n      expect(checkmarkFilter(false)).toBe('\\u2718');\r\n    }));\r\n  });\r\n});\r\n\r\n\r\n```\r\n\r\n\r\n### Route\r\nGenerates a route in `src/app/<module>`.\r\n\r\nSyntax:\r\n\r\n```bash\r\nslush angular-gulp:route <route-Name>\r\n```\r\n\r\nExample:\r\n\r\n```bash\r\nslush angular-gulp:route user\r\n```\r\n\r\n```log\r\n[09:55:24] Starting 'angular-gulp:route'...\r\n? What is the name of your route? user\r\n? What is your AngularJS module name? user\r\n? Replace user-route.js? replace\r\n[09:55:34] [conflict] Overwriting user-route.js\r\n[09:55:34] Finished 'angular-gulp:route' after 9.49 s\r\n[slush] Scaffolding done\r\n```\r\n\r\nProduces `src/app/home/user-route.js`:\r\n```javascript\r\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('myAngular.user')\r\n        .config( userRoute);\r\n\r\n\r\n    /* @ngInject */\r\n    function userRoute($routeProvider) {\r\n        $routeProvider\r\n            .when('/user', { //Default\r\n                controller: 'UserCtrl',\r\n                templateUrl: 'user/user.html'\r\n            });\r\n\r\n    }\r\n\r\n})();\r\n```\r\n### Service\r\nGenerates a service in `src/app/<module>`.\r\n\r\nSyntax:\r\n\r\n```bash\r\nslush angular-gulp:service <service-Name>\r\n```\r\n\r\nExample:\r\n\r\n```bash\r\nslush angular-gulp:service session\r\n```\r\n\r\n```log\r\n[13:28:05] Starting 'angular-gulp:service'...\r\n? What is the name of your service? session\r\n? What is your AngularJS module name? home\r\n[13:28:13] [conflict] Creating session-service.js\r\n[13:28:13] Finished 'angular-gulp:service' after 8.21 s\r\n[slush] Scaffolding done\r\n```\r\n\r\nProduces `src/app/home/session-service.js`:\r\n```javascript\r\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('myAngular.home')\r\n        .service('sessionService',  sessionService);\r\n\r\n\r\n    /* @ngInject */\r\n    function sessionService() {\r\n        var someValue = '';\r\n        var service = {\r\n            save: save,\r\n            someValue: someValue,\r\n            validate: validate\r\n        };\r\n        return service;\r\n\r\n        ////////////\r\n\r\n        function save() {\r\n            /* */\r\n        };\r\n\r\n        function validate() {\r\n            /* */\r\n        };\r\n    }\r\n\r\n})();\r\n\r\n```\r\n\r\n### Factory\r\nGenerates a factory in `src/app/<module>`.\r\n\r\nSyntax:\r\n\r\n```bash\r\nslush angular-gulp:factory <factory-Name>\r\n```\r\n\r\nExample:\r\n\r\n```bash\r\nslush angular-gulp:factory session\r\n```\r\n\r\n```log\r\n[13:28:05] Starting 'angular-gulp:factory'...\r\n? What is the name of your factory? session\r\n? What is your AngularJS module name? home\r\n[13:28:13] [conflict] Creating session-factory.js\r\n[13:28:13] Finished 'angular-gulp:factory' after 8.21 s\r\n[slush] Scaffolding done\r\n```\r\n\r\nProduces `src/app/home/session-factory.js`:\r\n```javascript\r\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('myAngular.home')\r\n        .factory('sessionFactory',  sessionFactory);\r\n\r\n\r\n    /* @ngInject */\r\n    function sessionFactory() {\r\n        var someValue = '';\r\n        var factory = {\r\n            save: save,\r\n            someValue: someValue,\r\n            validate: validate\r\n        };\r\n        return factory;\r\n\r\n        ////////////\r\n\r\n        function save() {\r\n            /* */\r\n        };\r\n\r\n        function validate() {\r\n            /* */\r\n        };\r\n    }\r\n\r\n})();\r\n\r\n```\r\n\r\n### Provider\r\nGenerates a provider in `src/app/<module>`.\r\n\r\nSyntax:\r\n\r\n```bash\r\nslush angular-gulp:provider <provider-Name>\r\n```\r\n\r\nExample:\r\n\r\n```bash\r\nslush angular-gulp:provider game\r\n```\r\n\r\n```log\r\n[14:16:32] Starting 'angular-gulp:provider'...\r\n? What is the name of your provider? game\r\n? What is your AngularJS module name? user\r\n[14:16:47] [conflict] Creating game-provider.js\r\n[14:16:48] Finished 'angular-gulp:provider' after 16 s\r\n[slush] Scaffolding done\r\n```\r\n\r\nProduces `src/app/home/game-provider.js`:\r\n\r\n```javascript\r\n(function() {\r\n    'use strict';\r\n\r\nangular\r\n  .module('myAngular.user')\r\n        .provider('game',  gameProvider);\r\n\r\n    /* @ngInject */\r\n    function gameProvider() {\r\n        var someValue = '';\r\n        var provider = {\r\n            save: save,\r\n            someValue: someValue,\r\n            validate: validate\r\n        };\r\n        return provider;\r\n\r\n        ////////////\r\n\r\n        function save() {\r\n            /* */\r\n        }\r\n\r\n        function validate() {\r\n            /* */\r\n        }\r\n    }\r\n})();\r\n\r\n```\r\n\r\n### Constant\r\nGenerates a constant in `src/app/<module>`.\r\n\r\nSyntax:\r\n\r\n```bash\r\nslush angular-gulp:constant <constant-Name>\r\n```\r\n\r\nExample:\r\n\r\n```bash\r\nslush angular-gulp:constant apiKey\r\n```\r\n\r\n```log\r\n[14:59:07] Starting 'angular-gulp:constant'...\r\n? What is the name of your constant? appKey\r\n? What is your AngularJS module name? customer\r\n[14:59:13] [conflict] Creating appKey-constant.js\r\n[14:59:13] Finished 'angular-gulp:constant' after 5.56 s\r\n[slush] Scaffolding done\r\n```\r\n\r\nProduces `src/app/customer/appKey-constant.js`:\r\n\r\n```javascript\r\n(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('myAngular.customer')\r\n        .constant('appKey',  'appKey');\r\n\r\n\r\n})();\r\n\r\n\r\n```\r\n### Value\r\nGenerates a value in `src/app/<module>`.\r\n\r\nSyntax:\r\n\r\n```bash\r\nslush angular-gulp:value <value-Name>\r\n```\r\n\r\nExample:\r\n\r\n```bash\r\nslush angular-gulp:value api_key\r\n```\r\n\r\n```log\r\n[14:43:35] Starting 'angular-gulp:value'...\r\n? What is the name of your value? api_key\r\n? What is your AngularJS module name? heat\r\n[14:43:43] [conflict] Creating api_key-value.js\r\n[14:43:43] Finished 'angular-gulp:value' after 7.41 s\r\n[slush] Scaffolding done\r\n```\r\n\r\nProduces `src/app/heat/api_key-value.js`:\r\n\r\n```javascript\r\n(function() {\r\n    'use strict';\r\n\r\n    var apiKeyValue = {};\r\n\r\n    angular\r\n        .module('myAngular.heat')\r\n        .value('apiKey',  apiKeyValue);\r\n\r\n\r\n})();\r\n\r\n\r\n```\r\n\r\n### Decorator\r\nGenerates a decorator in `src/app/<module>`.\r\n\r\nSyntax:\r\n\r\n```bash\r\nslush angular-gulp:decorator <decorator-Name>\r\n```\r\n\r\nExample:\r\n\r\n```bash\r\nslush angular-gulp:decorator exception\r\n```\r\n\r\n```log\r\n[15:12:54] Starting 'angular-gulp:decorator'...\r\n? What is the name of your decorator? exception\r\n? What is your AngularJS module name? customer\r\n[15:13:08] [conflict] Creating exception-decorator.js\r\n[15:13:08] Finished 'angular-gulp:decorator' after 14 s\r\n[slush] Scaffolding done\r\n```\r\n\r\nProduces `src/app/customer/exception-decorator.js`:\r\n\r\n```javascript\r\n\r\n(function () {\r\n    'use strict'\r\n\r\n    angular\r\n        .module('myAngular.customer')\r\n    .config(exceptionConfig);\r\n\r\n/* @ngInject */\r\nfunction exceptionConfig($provide) {\r\n    $provide.decorator('$exceptionHandler', extendexceptionHandler);\r\n}\r\n\r\n/* @ngInject */\r\nfunction extendexceptionHandler($delegate) {\r\n    return function(exception, cause) {\r\n        $delegate(exception, cause);\r\n        var data = {\r\n            exception: exception\r\n        };\r\n    };\r\n}\r\n\r\n})();\r\n\r\n\r\n```\r\n\r\n### View\r\nGenerates a view in `src/app/<module>`.\r\n\r\nSyntax:\r\n\r\n```bash\r\nslush angular-gulp:view <view-Name>\r\n```\r\n\r\nExample:\r\n\r\n```bash\r\nslush angular-gulp:view user\r\n```\r\n\r\n```log\r\n[15:25:00] Starting 'angular-gulp:view'...\r\n? What is the name of your view? user\r\n? What is your AngularJS module name? user\r\n[15:25:27] [conflict] Creating user-view.html\r\n[15:25:27] Finished 'angular-gulp:view' after 27 s\r\n[slush] Scaffolding done\r\n```\r\n\r\nProduces `src/app/user/user-view.html`:\r\n\r\n```html\r\n<p>This is the user' view</p>\r\n```\r\n\r\n\r\n\r\n\r\n### Gulpfile\r\n\r\n#### Development\r\n\r\nTo start developing in your new generated project run:\r\n\r\n```bash\r\ngulp serve\r\n```\r\n\r\nThen head to `http://localhost:3000` in your browser.\r\n\r\nThe `serve` tasks starts a static file server, which serves your AngularJS application, and a watch task which watches your files for changes and lints, builds and injects them into your index.html accordingly.\r\n\r\n#### Tests\r\n\r\nTo run tests run:\r\n\r\n```bash\r\ngulp test\r\n```\r\n\r\n#### Production ready build - a.k.a. dist\r\n\r\nTo make the app ready for deploy to production run:\r\n\r\n```bash\r\ngulp dist\r\n```\r\n\r\n#### Testing Production ready build - a.k.a. dist\r\n\r\nTo make the app ready for deploy to production run:\r\n\r\n```bash\r\ngulp serve-dist\r\n```\r\n\r\nNow you have a `./dist` folder with all your scripts and stylesheets concatenated and minified, also third party libraries installed with bower will be concatenated and minified into `vendors.min.js` and `vendors.min.css` respectively.\r\n\r\n## Contributing guideline\r\n\r\nThe Contributing guideline can be found here [Contributing](docs/contributing.md).\r\n\r\n## Changelog\r\n\r\nThe Changelog can be found on the [releases section](https://github.com/reflexdemon/slush-angular-gulp/releases).\r\n\r\n## License\r\n\r\n[MIT](/LICENSE)\r\n","google":"UA-60801328-2","note":"Don't delete this file! It's used internally to help with page regeneration."}